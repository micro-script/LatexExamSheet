%
% Copyright (c) 2022 Kangwei Xia, Lijun Guo
% Released under the LaTeX Project Public License v1.3c License.
% Repository: https://gitee.com/zepinglee/exam-zh
%

\NeedsTeXFormat{LaTeX2e}

\RequirePackage{expl3}

\ProvidesExplPackage {exam-zh-chinese} {2022-07-22} {v0.1.11}
  {exam-zh chinese module}


\RequirePackage { tikz }

\keys_define:nn { exam-zh }
  { select .meta:nn = { exam-zh / select } {#1} }


% 选择环境 select
\str_new:N \l__examzh_select_mark_position_str   % mark 的方位

\keys_define:nn { exam-zh / select }
  {
    mark-symbol .tl_set:N = \l__examzh_select_mark_symbol_tl,
    mark-position .code:n =
      {
        \str_set:Nn \l__examzh_select_mark_position_str {#1}
      },
    mark-xshift .dim_set:N = \l__examzh_select_mark_xshift_dim,
    mark-yshift .dim_set:N = \l__examzh_select_mark_yshift_dim,
    separator .tl_set:N = \l__examzh_select_separator_tl,
    pre-content .tl_set:N = \l__examzh_select_pre_content_tl,
    post-content .tl_set:N = \l__examzh_select_post_content_tl,
    show-mark .bool_set:N = \l__examzh_select_show_mark_bool
  }
\keys_set:nn { exam-zh / select }
  {
    mark-symbol   = $\checkmark$,
    mark-position = right,
    mark-xshift   = 0pt,
    mark-yshift   = 0pt,
    separator     = \hspace{1em},
    pre-content   = (,
    post-content  = ),
    show-mark     = false
  }

\seq_new:N \l__examzh_select_seq      % 储存输入的内容

\NewDocumentEnvironment { select } { O{ } +b }
  {
    % 可选参数
    \keys_set:nn { exam-zh / select } {#1}
  }
  {
    % 检测 mark-position 的输入
    \__examzh_chinese_select_coffin_position_test:
    % 对输入用 \item 进行分割
    \seq_set_split:Nnn \l__examzh_select_seq { \sitem } {#2}
    \seq_if_empty:NF \l__examzh_select_seq
      { \seq_pop_left:NN \l__examzh_select_seq \l_tmpa_tl }
    % 将内容和 mark 符号存入 coffin 并拼接输出
    \__examzh_chinese_select_coffin_set_print:N
      \l__examzh_select_seq
  }
\cs_new:Npn \__examzh_chinese_select_coffin_set_print:N #1
% #1:\l__examzh_select_seq
  {
    % 前置内容
    \l__examzh_select_pre_content_tl
    % 主体部分
    \seq_map_indexed_inline:Nn #1
    % ##1: index
    % ##2: content
      {
        % coffin 的声明
        \__examzh_chinese_select_coffin_new:n {##1}
        % 看 seq 的项是否开头是 *，是的话去掉 * 和空格存到 content coffin 并且在 mark coffin 里加入 mark，不是的话就只存到 content coffin
        \__examzh_chinese_select_coffin_set:nn {##1} {##2}
        \bool_if:NT \l__examzh_select_show_mark_bool
          {
            % 拼接 content coffin 和 mark coffin
            \__examzh_chinese_select_coffin_join:n {##1}
          }
        % 输出 content coffin
        \__examzh_chinese_select_coffin_typeset:n {##1}
      }
    % 后置内容
    \l__examzh_select_post_content_tl
  }
\cs_new:Npn \__examzh_chinese_select_coffin_new:n #1
  {
    % 检测是否存在，没有的话就 new 一个
    \coffin_if_exist:cF { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin }
      { \coffin_new:c { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin } }
    \coffin_if_exist:cF { l__examzh_select_mark_ \int_to_roman:n {#1} _ coffin }
      { \coffin_new:c { l__examzh_select_mark_ \int_to_roman:n {#1} _ coffin } }
  }
\cs_new:Npn \__examzh_chinese_select_coffin_set:nn #1#2
% #1: index
% #2: content
  {
    \tl_if_head_eq_meaning:nNTF {#2} *
      {
        % 将去掉 * 号后的内容保存进 \l_tmpa_tl
        \tl_set:Nx \l_tmpa_tl { \tl_tail:n {#2} }
        % 去掉 * 和内容之间的空格
        \tl_trim_spaces:N \l_tmpa_tl
        % 将处理后的内容存到 content coffin 里
        \hcoffin_set:cn { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin } 
          { \l_tmpa_tl }
        % 将 marksymbol 存到对应的第 #1 个 mark coffin 里
        \hcoffin_set:cn { l__examzh_select_mark_ \int_to_roman:n {#1} _ coffin } 
          { \l__examzh_select_mark_symbol_tl }
      }
      {
        % 不带 * 的直接存 coffin
        \hcoffin_set:cn { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin } 
          {#2}
      }
  }
\msg_new:nnn { exam-zh / chinese } { select-no-mark-position }
  {
    There~is~no~position~named~#1 .\\
    Please~read~the~manual~carefully.
  }
\cs_new:Npn \__examzh_chinese_select_coffin_position_test:
  {
    \str_case:VnF \l__examzh_select_mark_position_str
      {
        { top } { }
        { above } { }
        { bottom } { }
        { below } { }
        { left } { }
        { right } { }
      }
      {
        \msg_error:nnx { exam-zh / chinese } { select-no-mark-position } { \l__examzh_select_mark_position_str }
      }
  }
\cs_new:Npn \__examzh_chinese_select_coffin_join:n #1
% #1: index
  {
    \use:c { __examzh_chinese_select_coffin_join_ \l__examzh_select_mark_position_str :n } {#1}
  }
\cs_new:Npn \__examzh_chinese_select_coffin_join_top:n #1
  {
    \coffin_join:cnncnnnn
      { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin }
      { hc } { t }
      { l__examzh_select_mark_ \int_to_roman:n {#1} _ coffin }
      { hc } { b }
      { \l__examzh_select_mark_xshift_dim }
      { \l__examzh_select_mark_yshift_dim + 2pt }
  }
\cs_set_eq:NN 
  \__examzh_chinese_select_coffin_join_above:n 
  \__examzh_chinese_select_coffin_join_top:n
\cs_new:Npn \__examzh_chinese_select_coffin_join_bottom:n #1
  {
    \coffin_join:cnncnnnn
      { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin }
      { hc } { H }
      { l__examzh_select_mark_ \int_to_roman:n {#1} _ coffin }
      { hc } { t }
      { \l__examzh_select_mark_xshift_dim }
      { \l__examzh_select_mark_yshift_dim - 2pt }
  }
\cs_set_eq:NN 
  \__examzh_chinese_select_coffin_join_below:n 
  \__examzh_chinese_select_coffin_join_bottom:n
\cs_new:Npn \__examzh_chinese_select_coffin_join_left:n #1
  {
    \coffin_join:cnncnnnn
      { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin }
      { l } { H }
      { l__examzh_select_mark_ \int_to_roman:n {#1} _ coffin }
      { r } { H }
      { \l__examzh_select_mark_xshift_dim }
      { \l__examzh_select_mark_yshift_dim }
  }
\cs_new:Npn \__examzh_chinese_select_coffin_join_right:n #1
  {
    \coffin_join:cnncnnnn
      { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin }
      { r } { H }
      { l__examzh_select_mark_ \int_to_roman:n {#1} _ coffin }
      { l } { H }
      { \l__examzh_select_mark_xshift_dim }
      { \l__examzh_select_mark_yshift_dim }
  }
\cs_new:Npn \__examzh_chinese_select_coffin_typeset:n #1
  {
    \int_compare:nNnTF {#1} = {1}
      {
        \coffin_typeset:cnnnn 
          { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin }
          {l} {H} {0pt} {0pt}
      }
      {
        \l__examzh_select_separator_tl
        \coffin_typeset:cnnnn 
          { l__examzh_select_content_ \int_to_roman:n {#1} _ coffin }
          {l} {H} {0pt} {0pt}
      }
  }


% 连线题 lineto
\clist_clear_new:N \l__examzh_lineto_list_set_clist 
\int_zero_new:N \l__examzh_lineto_node_index_int 

\keys_define:nn { exam-zh }
  { lineto .meta:nn = { exam-zh / lineto } {#1} }

\keys_define:nn { exam-zh / lineto }
  {
    xsep  .dim_set:N = \l__examzh_lineto_node_xsep_dim,
    ysep  .dim_set:N = \l__examzh_lineto_node_ysep_dim,
    name  .tl_set:N  = \l__examzh_lineto_name_tl,
    list-style .tl_set:N  = \l__examzh_lineto_list_style_tl 
  }
\keys_set:nn { exam-zh / lineto }
  {
    xsep = .25\linewidth,
    ysep = 1cm,
    name = \int_to_roman:n { \l__examzh_lineto_node_index_int }
  }


\NewDocumentEnvironment { lineto } { O{ } }
  {
    \begin{center}
      \begin{tikzpicture}[#1]
  }
  {
      \end{tikzpicture}
    \end{center}
  }


\NewDocumentCommand { \linelistset } { O{} m }
  {
    \int_incr:N \l__examzh_lineto_node_index_int  
    \group_begin:
      \keys_set:nn { exam-zh / lineto } {#1}
      \clist_set:Nn \l__examzh_lineto_list_set_clist {#2}
      \int_step_inline:nnn {1} 
        { \clist_count:N \l__examzh_lineto_list_set_clist }
        {
          \use:x
            {
              \exp_not:N \node
                [
                  name   = \l__examzh_lineto_name_tl - ##1,
                  \l__examzh_lineto_list_style_tl
                ] 
              at 
                (
                  \l__examzh_lineto_node_index_int * \l__examzh_lineto_node_xsep_dim,
                  - \int_eval:n { ##1 - 1 } * \l__examzh_lineto_node_ysep_dim
                ) 
                { \clist_item:Nn \l__examzh_lineto_list_set_clist {##1} }; 
            }
        }
    \group_end:
  }

\NewDocumentCommand { \lineconnect }{ O{} +m }
  {
    \clist_set:Nn \l_tmpa_clist {#2}
    \int_step_inline:nn { \clist_count:N \l_tmpa_clist - 1 }
      {
        \use:x
          {
            \exp_not:N \draw
              [line~cap = round, #1] 
              ( \clist_item:Nn \l_tmpa_clist {##1} .east ) 
                -- 
              ( \clist_item:Nn \l_tmpa_clist { ##1 + 1 } .west ); 
          }
      }
  }